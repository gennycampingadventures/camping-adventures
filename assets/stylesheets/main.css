/*

https://www.linkedin.com/pulse/css-best-practices-14-steps-become-ninja-pt1-alex-devero

==================================
Custom styles
==================================
*/

body {
  /* blue background on body, as website will have different rows of background colors and most frequent will be blue*/
  background: #293f50;
  color: #888;
  /* because Lato it is an embedded web font we’ll want to surround it with quotation marks within any CSS reference */
  font: 300 16px/22px "Lato", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
  /* order above is font-weight, font-size, line-height, font-family */
}

/*
==================================
Grid
==================================
*/

/* Setting the box size to border-box to make all sizing easier -- sets width to include width, padding, and border
   Selecting every imaginable element */
*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
                box-sizing: border-box;
}

/* Create class container to set common width, center elems on page, apply common horizontal padding */
/*
.container {
  margin: 0 auto;  auto in conjunction w/ width lets browser figure out equal left/right margins, thus centering page 
  padding-left: 30px;  left and right paddings ensure content isnt sitting directly on edge of elem, gives breathing room
  padding-right: 30px;
  width: 960px;  tell browsers definitively how wide any elem in class container should be 
}

THIS CONTAINER HAS BEEN COMMENTED OUT BECAUSE ITS VALUES HAVE BEEN SPLIT 

*/


/* Creating 3-column reusable layout
    We'll create it this way but will use a two-column layout with one column being two-thirds, another one-third
    col-1-3 = one-third
    col-2-3 = two-thirds
*/

.col-1-3 {
  width: 33.33%;
}

.col-2-3 {
  width: 66.66%;
}

/* want both columns to be displayed as inline-block elems, along with their vertical alignment being set to top for each column*/
.col-1-3,
.col-2-3 {
  display: inline-block;
  vertical-align: top;
}

/* To break up content, we'll put space between each of the columns using a horizontal padding on each 
    When two columns sit next to each other, width of space between them will be double that of the spacefrom outside columns to edge of the row
      - to balance this out well place columns within a grid, add same padding from our columns to that grid
    We need to be careful when doing this - we have our container class used to center all our content within a 960-px wide element
        - if we put an elem with the class of grid inside an elem with class of container, their horizontal paddings would add to one another and our columns would not appear proportionate to width of rest of page
        - to avoid this, we'll share some styles from container rule set with grid rule set, specifically the width (to make sure our page stays fixed at 960px) and margin (to center any elem with class of grid on the page) prop/vals
*/

.grid,
.col-1-3,
.col-2-3 {
  padding-left: 15px;
  padding-right: 15px;
}

.container,
.grid {
  margin: 0 auto; /* auto in conjunction w/ width lets browser figure out equal left/right margins, thus centering page */
  width: 960px; /* tell browsers definitively how wide any elem in class container should be */
}

.container {
  padding-left: 30px;  /* left and right paddings ensure content isnt sitting directly on edge of elem, gives breathing room */
  padding-right: 30px;
}


/*
==================================
Typography
==================================
*/

h1, h2, h3, h4 {
  color: #648880;
}

/* Create some vertical spacing between elems */
h1, h3, h4, h5, p {
  margin-bottom: 22px;
}

h1 {
  font-size: 36px;
  line-height: 44px;  /* double the value of the line-height in the body */
}

h2 {
  font-size: 24px;
  line-height: 44px;
}

h3 {
  font-size: 21px;
}

h4 {
  font-size: 18px;
}

h5 {
  color: #a9b2b9;
  font-size: 14px;
  font-weight: 400;  /* browsers give headers font weight of bold, but remember we used the reset */
  text-transform: uppercase;
}

/* reset also reset the browser defaults for <strong>, <cite>, <em> */
/* the font weight of 400 is actually normal, not bold, because our typeface is thicker than most */

strong {
  font-weight: 400;
}

cite, em {
  font-style: italic;
}

/*
==================================
Leads
==================================
*/

.lead {
  text-align: center;
}

.lead p {
  font-size: 21px;
  line-height: 33px;
}

/*
==================================
Buttons
==================================
*/

.btn {
  border-radius: 5px;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  font-weight: 400;
  letter-spacing: .5px;
  margin: 0;
  text-transform: uppercase;
}

.btn-alt {
  border: 1px solid #fff;
  padding: 10px 30px;
}

.btn-alt:hover {
  background: #fff;
  color: #648880;
}

.btn-default {
  border: 0;
  background: #648880;
  padding: 11px 30px;
  font-size: 14px;
}

.btn-default:hover {
  background: #77a198;
}


/*
  ========================================
  Home
  ========================================
*/

.hero {
  color: #fff;
  line-height: 44px;
  padding: 22px 80px 66px 80px;
  text-align: center;
}

.hero h2 {
  font-size: 36px;
}

.hero p {
  font-size: 24px;
  font-weight: 100;
}

.teaser a:hover h3 {
  color: #a9b2b9;
}

.teaser img {
  border-radius: 5px;
  display: block;
  margin-bottom: 22px;
  /*ensure they don’t exceed the width of their respective columns. Changing this width value is important as it allows our images to adjust with the width of the columns as necessary*/
  max-width: 100%;
}

.main-intro {
  max-width: 80%;
  text-align: center;
  margin: 0 auto;  /* center main intro p */
  margin-bottom: 44px; /* override 22px on p elems, give some extra space */
  font-size: 18px;
  letter-spacing: .5px;
}

/*
  ========================================
  Clearfix - way to contain floats
  ========================================
*/

/*
  - :before and :after = pseudo-elems that are dynamically generated above and below the element with the class of group
  - the dynamically generated element after the element with the class of group is clearing the floats within the element of the class of group
  - elem with class of group itself also clears any floats that may appear before it (also includes trickery to get older browsers to play nicely)
*/
.group:before,
.group:after {
  content: "";
  display: table;
}
.group:after {
  clear: both;
}
.group {
  clear: both;
  *zoom: 1;
}

/*
  ========================================
  Rows
  ========================================
*/

.row,
.row-alt {
  min-width: 960px;
}

.row {
  background: #fff;
  padding: 66px 0 44px 0;
}

.row-alt {
  background: #cbe2c1;
  background: -webkit-linear-gradient(to right, #a1d3b0, #f6f1d3);
  background: -moz-linear-gradient(to right, #a1d3b0, #f6f1d3);
  background: linear-gradient(to right, #a1d3b0, #f6f1d3);
  padding: 44px 0 22px 0;
}

/*
  ========================================
  Primary header
  ========================================
*/

/*
  going to float the primary h1 within the header to the left, and all other header content will wrap right of it
  also adding border top, and giving it some vertical padding to breath
*/

.logo {
  border-top: 4px solid #648880;
  float: left;
  font-size: 48px;
  font-weight: 100;
  letter-spacing: .5px;
  line-height: 44px;
  padding: 40px 0 22px 0;
  text-transform: uppercase;
}

.tagline {
  margin: 66px 0 22px 0;
  text-align: right;
}

.primary-nav {
  font-size: 14px;
  font-weight: 400;
  letter-spacing: .5px;
  text-transform: uppercase;
}


/*
  ========================================
  Primary footer
  ========================================
*/

/* add padding to top and bottom of footer to help separate it from rest of page */
.primary-footer {
  color: #648880;
  font-size: 14px;
  padding-bottom: 44px;
  padding-top: 44px;
}

/* selecting, floating the <small> elem to the left */
/* we are selecting the <small> elem, which must reside within an element with the class attribute value of primary-footer, such as our <footer> elem */
.primary-footer small {
  float: left;
  font-weight: 400;
}

/*
  ========================================
Navigation
  ========================================
*/

.nav {
  text-align: right;
}

.nav li {
  display: inline-block;
  margin: 0 10px;
  vertical-align: top;
}

.nav li:last-child {
  margin-right: 0;
}


/*
  ========================================
  Links
  ========================================
*/

/* removing underline from all links */
a {
  color: #648880;
  text-decoration: none;
}

a:hover {
  color: #a9b2b9;
}

/* add underline to links in paragraphs -- using border-bottom instead of text-decoration because we have more control of underline's appearance */
p a {
  border-bottom: 1px solid #dfe2e5;
}

.primary-header a,
.primary-footer a {
  color: #fff;
}

.primary-header a,
.primary-footer a {
  color: #6488880;
}

/*
  ========================================
  Campsites
  ========================================
*/

/*As we add more and more campsites to the page, we’ll want to ensure that they remain an equal distance apart vertically. To do so, we’ll create a campsite class rule set which includes a bottom margin of 44 pixels, like this:*/
.campsite {
  margin-bottom: 44px;
}

.campsite-info {
  border: 1px solid #dfe2e5; /* solid gray border */
  border-radius: 5px;
  margin-top: 88px;
  /*padding: 22px 0;*/
  padding-bottom: 22px;
  text-align: center;
}

.campsite-info img {
  border-radius: 50%;
  height: 130px;
  margin: -66px 0 22px 0;
  vertical-align: top;
/*Since we are using an aggressive negative margin on the <img> element within the <div> element with a class attribute value of speaker-info, we need to remove the padding on the top of that <div> element. (SEE ABOVE, SET TO PADDING BOTTOM )*/
}

.campsite-2017 {
  margin-bottom: 66px; /* space between this and campsite below */
}

/*The <section> element with the class attribute value of campsite-2016 has a smaller bottom margin than the <section> element with the class attribute value of campsite-2017 because it sits next to the padding from the bottom of the <section> element with the class attribute of row (primary footer has a margin-top of 44px). Adding that margin and padding together gives us the same value as the bottom margin on the <section> element with the class attribute value of campsite-2017.*/

.campsite-2016 {
  margin-bottom: 22px; /* space between last site and footer */
}

.campsite-map {
  height: 264px;  
}

/*
  ========================================
  Items
  ========================================
*/

.campsite-items {
  max-width: 100%;
  text-align: center;
}

.item-header {
  font-weight: 400;
  margin-bottom: 5px;
}

/*
  ========================================
  Register
  ========================================
*/

/*You’ll notice that most of these properties and values revolve around the box model, which we covered in Lesson 4. We’re primarily setting up the size of different form controls, ensuring that they are laid out appropriately. Aside from adding some box model styles, we’re adjusting the color and font-weight of a few elements.*/

.why-attend {
  list-style: square;
  margin: 0 0 22px 30px;
}

form {
  margin-bottom: 22px;
}

input, select, textarea {
  font: 300 16px/22px "Lato", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
}

.register-group label {
  color: #648880;
  cursor: pointer;
  font-weight: 400;
}

.register-group input,
.register-group select,
.register-group textarea {
  border: 1px solid #c6c9cc;
  border-radius: 5px;
  color: #888;
  display: block;
  margin: 5px 0 27px 0;
  padding: 5px 8px;
}

.register-group input,
.register-group textarea {
  width: 100%;
}

.register-group select {
  height: 34px;
  width: 60px;
}

.register-group textarea {
  height: 78px;
}

/*
  ========================================
  Schedule
  ========================================
*/

table {
  width: 100%;
  margin: 44px;  
}

table:last-child {
  margin-bottom: 0; /* prevents this table from conflicting with the bottom padding belonging to the <section> element with a class attribute value of row */
}

th, 
td {
  padding-bottom: 22px;
  vertical-align: top;
}

th {
  padding-right: 45px;
  text-align: right;
  width: 20%;
}

td {
  width: 40px;
}

thead {
  line-height: 44px;
}

thead th {
  color: #648880;
  font-size: 24px;
}

tbody th {
  color: #a9b2b9;
  font-size: 14px;
  font-weight: 400;
  padding-top: 22px;
  text-transform: uppercase;
}

/*The :first-of-type pseudo-class selector will select the first element of its type within a parent element. In our case, the td:first-of-type selector will select the first <td> element within a <tr> element. Then, the :last-of-type pseudo-class selector will select the last element of its type within a parent element.
Again, in our case, the td:last-of-type selector will select the last <td> element within a <tr> element. Lastly, the :only-of-type pseudo-class selector will select an element if it’s the only element of its type within a parent element. Here, the td:only-of-type selector will only select a <td> element if it’s the only <td> element within a <tr> element, such as when a <td> element spans two columns.*/

tbody td {
  border-top: 1px solid #dfe2e5;
  padding-top: 21px;
}

tbody td:first-of-type {
  padding-right: 15px;
}

tbody td:last-of-type {
  padding-left: 15px;
}

tbody td:only-of-type {
  padding-left: 0;
  padding-right: 0;
}

/*If we target only the <a> elements within a table, our headings with the speaker’s name within the links will remain green, while the talk titles will be gray, creating a nice contrast between the two*/
table a {
  color: #888;
}

/*remove the bottom margin on the <h4> elements within the table, allowing the speaker’s name to sit closer to her or his title*/
table h4 {
  margin-bottom: 0;
}

.schedule-offset {
  color: #a9b2b9;
}